package gsh.demo.practice01_stackandqueue;


/**
 *  给定数组中， 有多少个子数组 满足 最大值减去最小值   <= num
 *  要求 如果数组长度为 n  时间复杂度为O（N）
 *
 */


public class Code10_GetSubArrCount {


    /**
     *
     * 时间复杂度高的算法
     *
     * f1（int[] arr） 判断数组中的最大值和最小值 是否满足条件 O(N)
     *
     * f2 (int[] arr)  求出所有的子数组  O（N^2）
     *
     * 整体的时间复杂度 O（N^3）
     */



    // 首先 这个时间复杂度的要求 只能是 一遍 循环  就要求出结果

    /***
     *
     *  优化的解法
     *  空间 换 时间
     *  一个数组中最大值 和最小值 满足条件  那么这个数组中的子数组都满足条件
     *
     *  维护两个记录窗口的 双端队列
     *
     *  每个元素进出队列的次数为1 最终的时间复杂度为 O（N）
     *
     *  窗口向右扩张 一旦扩张不动  先计算结果 记录结果  然后 左边的窗口向右扩张 重复右端窗口向右扩张
     *
     */















}
